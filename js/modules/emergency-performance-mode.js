// emergency-performance-mode.js
export class EmergencyPerformanceMode {
    constructor() {
        this.isEmergencyMode = false;
        this.isLightweightMode = false;
        this.toggleButton = document.getElementById('emergency-performance-btn');
        this.lightweightStyles = null;
        this.cameraGrid = document.querySelector('.camera-grid');
        this.cameraPlaceholder = document.querySelector('.camera-placeholder');
        this.controlPanel = document.querySelector('.control-panel');
        this.anomaly = null;
        this.zalgoEffect = null;
        
        this.init();
    }

    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const savedMode = localStorage.getItem('scp-emergency-mode');
        if (savedMode === 'emergency') {
            this.activateEmergencyMode();
        } else if (savedMode === 'lightweight') {
            this.activateLightweightMode();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        if (this.toggleButton) {
            this.toggleButton.addEventListener('click', () => {
                this.toggleMode();
            });
        }
    }

    toggleMode() {
        if (this.isEmergencyMode) {
            this.deactivateAllModes();
        } else if (this.isLightweightMode) {
            this.activateEmergencyMode();
        } else {
            this.activateLightweightMode();
        }
    }

    activateEmergencyMode() {
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞–∫ –æ—Å–Ω–æ–≤—É
        this.activateLightweightMode();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        this.isEmergencyMode = true;
        localStorage.setItem('scp-emergency-mode', 'emergency');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–Ω–æ–º–∞–ª–∏–∏
        this.stopAllAnomalies();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        this.applyEmergencyEffects();
        
        this.updateButtonText();
        this.logModeChange('–ê–í–ê–†–ò–ô–ù–´–ô –ü–†–û–¢–û–ö–û–õ 7-Œî –ê–ö–¢–ò–í–ò–†–û–í–ê–ù - –í–°–ï –°–ò–°–¢–ï–ú–´ –û–ß–ò–©–ï–ù–´');
    }

    activateLightweightMode() {
        if (!this.lightweightStyles) {
            this.lightweightStyles = document.createElement('link');
            this.lightweightStyles.rel = 'stylesheet';
            this.lightweightStyles.href = 'css/modes/lightweight-mode.css';
            document.head.appendChild(this.lightweightStyles);
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
        if (this.cameraGrid) this.cameraGrid.style.display = 'none';
        if (this.cameraPlaceholder) this.cameraPlaceholder.style.display = 'block';
        if (this.controlPanel) this.controlPanel.style.display = 'none';

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
        this.stopAllAnomalies();

        document.body.classList.add('lightweight-mode');
        this.isLightweightMode = true;
        this.isEmergencyMode = false;
        localStorage.setItem('scp-emergency-mode', 'lightweight');
        
        this.updateButtonText();
        this.logModeChange('–û–ë–õ–ï–ì–ß–ï–ù–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù - –í–ò–î–ï–û–ù–ê–ë–õ–Æ–î–ï–ù–ò–ï –û–¢–ö–õ–Æ–ß–ï–ù–û');
    }

    deactivateAllModes() {
        if (this.lightweightStyles) {
            this.lightweightStyles.remove();
            this.lightweightStyles = null;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ —Å–∫—Ä—ã–≤–∞–µ–º placeholder
        if (this.cameraGrid) this.cameraGrid.style.display = 'grid';
        if (this.cameraPlaceholder) this.cameraPlaceholder.style.display = 'none';
        if (this.controlPanel) this.controlPanel.style.display = 'flex';

        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.removeEmergencyEffects();

        document.body.classList.remove('lightweight-mode');
        this.isLightweightMode = false;
        this.isEmergencyMode = false;
        localStorage.setItem('scp-emergency-mode', 'normal');
        
        this.updateButtonText();
        this.logModeChange('–ù–û–†–ú–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù - –í–°–ï –°–ò–°–¢–ï–ú–´ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´');
    }

    stopAllAnomalies() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Zalgo —ç—Ñ—Ñ–µ–∫—Ç
        if (window.zalgoEffect && typeof window.zalgoEffect.stop === 'function') {
            window.zalgoEffect.stop();
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–æ–º–∞–ª–∏–∏
        if (window.anomaly && typeof window.anomaly.stop === 'function') {
            window.anomaly.stop();
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º
        if (window.emergencyMode && typeof window.emergencyMode.deactivate === 'function') {
            window.emergencyMode.deactivate();
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è
        this.cleanVisualEffects();
    }

    cleanVisualEffects() {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≥–ª–∏—Ç—á-—ç—Ñ—Ñ–µ–∫—Ç—ã
        const glitchElements = document.querySelectorAll('.glitch-overlay, .color-distortion, .noise-overlay');
        glitchElements.forEach(el => {
            el.style.display = 'none';
            el.style.opacity = '0';
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        const textElements = document.querySelectorAll('.glitch-text, [data-zalgo]');
        textElements.forEach(el => {
            el.classList.remove('glitch-text');
            el.removeAttribute('data-zalgo');
            el.style.transform = 'none';
            el.style.opacity = '1';
        });
        
        // –£–±–∏—Ä–∞–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–µ –≤—Å–ø—ã—à–∫–∏
        const flashes = document.querySelectorAll('[class*="flash"], [class*="emergency"]');
        flashes.forEach(el => el.remove());
    }

    applyEmergencyEffects() {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        const emergencyIndicator = document.createElement('div');
        emergencyIndicator.className = 'emergency-indicator';
        emergencyIndicator.innerHTML = 'üö® –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù üö®';
        emergencyIndicator.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(255, 0, 0, 0.9);
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            font-family: 'Share Tech Mono', monospace;
            font-size: 14px;
            z-index: 10000;
            border: 2px solid #ff4444;
        `;
        document.body.appendChild(emergencyIndicator);
        
        // –ú–∏–≥–∞—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞
        document.body.style.animation = 'emergencyPulse 2s infinite';
    }

    removeEmergencyEffects() {
        // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        const indicators = document.querySelectorAll('.emergency-indicator');
        indicators.forEach(el => el.remove());
        
        // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
        document.body.style.animation = 'none';
    }

    updateButtonText() {
        if (this.toggleButton) {
            if (this.isEmergencyMode) {
                this.toggleButton.textContent = '‚úÖ –ü–†–û–¢–û–ö–û–õ 7-Œî: –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨';
            } else if (this.isLightweightMode) {
                this.toggleButton.textContent = 'üöÄ –ü–†–û–¢–û–ö–û–õ 7-Œî: –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú';
            } else {
                this.toggleButton.textContent = 'üö® –ü–†–û–¢–û–ö–û–õ 7-Œî: –ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨';
            }
        }
    }

    logModeChange(message) {
        if (typeof window.logEvent === 'function') {
            window.logEvent(message);
        } else {
            console.log('SYSTEM LOG:', message);
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    isAnyModeActive() {
        return this.isEmergencyMode || this.isLightweightMode;
    }

    getCurrentMode() {
        if (this.isEmergencyMode) return 'emergency';
        if (this.isLightweightMode) return 'lightweight';
        return 'normal';
    }
}